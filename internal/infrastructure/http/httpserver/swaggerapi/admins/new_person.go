// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPersonHandlerFunc turns a function with the right signature into a new person handler
type NewPersonHandlerFunc func(NewPersonParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NewPersonHandlerFunc) Handle(params NewPersonParams) middleware.Responder {
	return fn(params)
}

// NewPersonHandler interface for that can handle valid new person params
type NewPersonHandler interface {
	Handle(NewPersonParams) middleware.Responder
}

// NewNewPerson creates a new http.Handler for the new person operation
func NewNewPerson(ctx *middleware.Context, handler NewPersonHandler) *NewPerson {
	return &NewPerson{Context: ctx, Handler: handler}
}

/*
	NewPerson swagger:route POST /persons admins newPerson

adds new person item

Adds new person to the system
*/
type NewPerson struct {
	Context *middleware.Context
	Handler NewPersonHandler
}

func (o *NewPerson) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNewPersonParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NewPersonBody Sample person model
//
// swagger:model NewPersonBody
type NewPersonBody struct {

	// inn
	// Example: 123456789012
	// Required: true
	Inn *uint64 `json:"inn"`

	// name
	// Example: John Smith
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this new person body
func (o *NewPersonBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NewPersonBody) validateInn(formats strfmt.Registry) error {

	if err := validate.Required("Person"+"."+"inn", "body", o.Inn); err != nil {
		return err
	}

	return nil
}

func (o *NewPersonBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Person"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new person body based on context it is used
func (o *NewPersonBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NewPersonBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NewPersonBody) UnmarshalBinary(b []byte) error {
	var res NewPersonBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
