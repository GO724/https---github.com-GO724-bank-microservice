// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetBanksHandlerFunc turns a function with the right signature into a get banks handler
type GetBanksHandlerFunc func(GetBanksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBanksHandlerFunc) Handle(params GetBanksParams) middleware.Responder {
	return fn(params)
}

// GetBanksHandler interface for that can handle valid get banks params
type GetBanksHandler interface {
	Handle(GetBanksParams) middleware.Responder
}

// NewGetBanks creates a new http.Handler for the get banks operation
func NewGetBanks(ctx *middleware.Context, handler GetBanksHandler) *GetBanks {
	return &GetBanks{Context: ctx, Handler: handler}
}

/*
	GetBanks swagger:route GET /banks admins getBanks

searches banks

By passing in the appropriate options, you can search for
banks in the system
*/
type GetBanks struct {
	Context *middleware.Context
	Handler GetBanksHandler
}

func (o *GetBanks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBanksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBanksOKBodyItems0 Sample bank model
//
// swagger:model GetBanksOKBodyItems0
type GetBanksOKBodyItems0 struct {

	// bic
	// Example: 123456789
	// Required: true
	Bic *uint32 `json:"bic"`

	// name
	// Example: Bank of Albania
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this get banks o k body items0
func (o *GetBanksOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBanksOKBodyItems0) validateBic(formats strfmt.Registry) error {

	if err := validate.Required("bic", "body", o.Bic); err != nil {
		return err
	}

	return nil
}

func (o *GetBanksOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get banks o k body items0 based on context it is used
func (o *GetBanksOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBanksOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBanksOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetBanksOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
