// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCardsHandlerFunc turns a function with the right signature into a get cards handler
type GetCardsHandlerFunc func(GetCardsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCardsHandlerFunc) Handle(params GetCardsParams) middleware.Responder {
	return fn(params)
}

// GetCardsHandler interface for that can handle valid get cards params
type GetCardsHandler interface {
	Handle(GetCardsParams) middleware.Responder
}

// NewGetCards creates a new http.Handler for the get cards operation
func NewGetCards(ctx *middleware.Context, handler GetCardsHandler) *GetCards {
	return &GetCards{Context: ctx, Handler: handler}
}

/*
	GetCards swagger:route GET /cards admins getCards

searches cards

By passing in the appropriate options, you can search for
cards in the system
*/
type GetCards struct {
	Context *middleware.Context
	Handler GetCardsHandler
}

func (o *GetCards) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCardsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCardsOKBodyItems0 Sample card model
//
// swagger:model GetCardsOKBodyItems0
type GetCardsOKBodyItems0 struct {

	// bic
	// Example: 123456789
	// Required: true
	Bic *uint32 `json:"bic"`

	// expires
	// Example: 2016-08-29T09:12:33.001Z
	// Required: true
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires"`

	// id
	// Example: 1234123412341234
	// Required: true
	ID *uint64 `json:"id"`

	// name
	// Example: Bank of Albania
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this get cards o k body items0
func (o *GetCardsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCardsOKBodyItems0) validateBic(formats strfmt.Registry) error {

	if err := validate.Required("bic", "body", o.Bic); err != nil {
		return err
	}

	return nil
}

func (o *GetCardsOKBodyItems0) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("expires", "body", o.Expires); err != nil {
		return err
	}

	if err := validate.FormatOf("expires", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCardsOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetCardsOKBodyItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get cards o k body items0 based on context it is used
func (o *GetCardsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCardsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCardsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetCardsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
