// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddCardHandlerFunc turns a function with the right signature into a add card handler
type AddCardHandlerFunc func(AddCardParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddCardHandlerFunc) Handle(params AddCardParams) middleware.Responder {
	return fn(params)
}

// AddCardHandler interface for that can handle valid add card params
type AddCardHandler interface {
	Handle(AddCardParams) middleware.Responder
}

// NewAddCard creates a new http.Handler for the add card operation
func NewAddCard(ctx *middleware.Context, handler AddCardHandler) *AddCard {
	return &AddCard{Context: ctx, Handler: handler}
}

/*
	AddCard swagger:route POST /cards admins addCard

adds new card item

Adds new card to the system
*/
type AddCard struct {
	Context *middleware.Context
	Handler AddCardHandler
}

func (o *AddCard) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddCardParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddCardBody Sample card model
//
// swagger:model AddCardBody
type AddCardBody struct {

	// bic
	// Example: 123456789
	// Required: true
	Bic *uint32 `json:"bic"`

	// expires
	// Example: 2016-08-29T09:12:33.001Z
	// Required: true
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires"`

	// id
	// Example: 1234123412341234
	// Required: true
	ID *uint64 `json:"id"`

	// name
	// Example: Bank of Albania
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this add card body
func (o *AddCardBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCardBody) validateBic(formats strfmt.Registry) error {

	if err := validate.Required("card"+"."+"bic", "body", o.Bic); err != nil {
		return err
	}

	return nil
}

func (o *AddCardBody) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("card"+"."+"expires", "body", o.Expires); err != nil {
		return err
	}

	if err := validate.FormatOf("card"+"."+"expires", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *AddCardBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("card"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *AddCardBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("card"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add card body based on context it is used
func (o *AddCardBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddCardBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCardBody) UnmarshalBinary(b []byte) error {
	var res AddCardBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
