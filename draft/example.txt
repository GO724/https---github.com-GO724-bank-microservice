// Роман, [01.08.2024 15:32]

package controllers

type controller struct {
// 	logger            *slog.Logger
// 	loggerLevel       slog.Attr
// 	framesRepo        framesRepo
// 	configsRepo       configsRepo
// 	serialNumbersRepo serialNumbersRepo
// 	analyseService
}
  
// type analyseService interface {
// 	SendToAnalyse(req []byte) error
// }
  
//  type framesRepo interface {
// 	CreateFrame(frame *entities.Frame) error
// 	GetFramesByEventID(eventID string) ([]*entities.Frame, error)
// }

func New(logger *slog.Logger, fRepo framesRepo,
// 	configsRepo configsRepo, sn serialNumbersRepo, a analyseService) Controller {
// 	controllerLogLevel := 
// 	return &controller{
// 	  logger:            logger,
// 	  loggerLevel:       slog.String(loggerlib.LoggerLevelArg, controllerLogLevel),
// 	  framesRepo:        fRepo,
// 	  configsRepo:       configsRepo,
// 	  serialNumbersRepo: sn,
// 	  analyseService:    a,
// 	}
//   }



********************


type chartsFiles struct {
  log         *slog.Logger
  db          *database.Database
  loggerLevel slog.Attr
}

type ChartsFiles interface {
  CreateChartFile(eventID string, graphUUID uuid.UUID) error
  GetExistsChartFile(eventID string) (uuid.UUID, error)
}

func New(log *slog.Logger, db *database.Database) ChartsFiles {
  return &chartsFiles{
    log:         log,
    db:          db,
    loggerLevel: slog.String(logger.LoggerLevelArg, chartsFilesLogLevel),
  }
}

const iniFile string = "db.ini"
	// load settings
	// cfg, err := ini.Load(iniFile)
	// if err != nil {
	// fmt.Printf("%v: Create new %s ", err, iniFile)
	// 	cfg.SaveTo(iniFile)
	// cfg.Section("db").Key("engine").SetValue("PosgreSQL")
	// 	cfg.Section("db").Key("dbname").SetValue("PosgreSQL")
	// 	cfg.Section("db").Key("host").SetValue("localhost")
	// 	cfg.Section("db").Key("port").SetValue("5432")
	// 	cfg.Section("db").Key("user").SetValue("asg")
	// 	cfg.Section("db").Key("password").SetValue("657742")
	// 	cfg.SaveTo(iniFile)
	// }

	// fmt.Println("DB Engine:",
	// 	cfg.Section("db").Key("engine").In("PosgreSQL", []string{"PosgreSQL", "Other"}))

	// fmt.Printf("DB name: (%[1]T) %[1]v\n",
	// 	cfg.Section("db").Key("dbname").String())

	// fmt.Println("Host:",
	// 	cfg.Section("db").Key("host").String())

	// fmt.Printf("Port Number: (%[1]T) %[1]d\n",
	// 	cfg.Section("db").Key("port").MustInt(9999))

	// fmt.Printf("User: (%[1]T) %[1]v\n",
	// 	cfg.Section("db").Key("user").MustBool(false))

	// fmt.Printf("Password: (%[1]T) %[1]v\n",
	// 	cfg.Section("db").Key("password").String())






// type Person interface {
// 	SetPerson(inn uint, name string) (new bool, err error)
// 	GetPerson(inn uint) (person *person, err error)
// 	DeletePerson(inn uint) (err error)
// }

// type Bank interface {
// 	SetBank(bic uint, name string) (new bool, err error)
// 	GetBank(bic uint) (bank *bank, err error)
// 	DeleteBank(bic uint) (err error)
// }

// type Card interface {
// 	SetCard(id uint, person person, bank bank, expires time.Time) (new bool, err error)
// 	GetCard(id uint) (card *card, err error)
// 	CheckCard(id uint, person person, bank bank, expires time.Time) (err error)
// 	DeleteCard(id uint) (err error)
// 	DeleteExpired() (ctx context.Context, err error)
// }

// func (b *bank) SetBank(bic uint, name string) (new bool, err error) {
// 	new = false
// 	err = nil
// 	// if found(bic){
// 	//     update name
// 	// }else{
// 	//     append new
// 	//     new = true
// 	// }
// 	return new, err
// }

// func (b *bank) GetBicBank() (bic uint) {
// 	return b.bic
// }

// func (b *bank) GetNameBank() (name string) {
// 	return b.name
// }

// func (b *bank) DeleteBank(Bic uint) error {
// 	return nil
// }

// func (p *Person) GetPerson(){

// }

// func (p *Person) SetPerson(){

// }

// func (c *Card) GetCard(){

// }

// func (c *Card) SetCard(){

// }

// func (c *Card) IsValid(){

// }
