// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"bank-microservice/api/models"
)

// IsValidReader is a Reader for the IsValid structure.
type IsValidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsValidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsValidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIsValidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /card/validator/{id}] isValid", response, response.Code())
	}
}

// NewIsValidOK creates a IsValidOK with default headers values
func NewIsValidOK() *IsValidOK {
	return &IsValidOK{}
}

/*
IsValidOK describes a response with status code 200, with default header values.

search results matching criteria
*/
type IsValidOK struct {
	Payload []*models.Card
}

// IsSuccess returns true when this is valid o k response has a 2xx status code
func (o *IsValidOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this is valid o k response has a 3xx status code
func (o *IsValidOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is valid o k response has a 4xx status code
func (o *IsValidOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this is valid o k response has a 5xx status code
func (o *IsValidOK) IsServerError() bool {
	return false
}

// IsCode returns true when this is valid o k response a status code equal to that given
func (o *IsValidOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the is valid o k response
func (o *IsValidOK) Code() int {
	return 200
}

func (o *IsValidOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /card/validator/{id}][%d] isValidOK %s", 200, payload)
}

func (o *IsValidOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /card/validator/{id}][%d] isValidOK %s", 200, payload)
}

func (o *IsValidOK) GetPayload() []*models.Card {
	return o.Payload
}

func (o *IsValidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsValidBadRequest creates a IsValidBadRequest with default headers values
func NewIsValidBadRequest() *IsValidBadRequest {
	return &IsValidBadRequest{}
}

/*
IsValidBadRequest describes a response with status code 400, with default header values.

bad input parameter
*/
type IsValidBadRequest struct {
}

// IsSuccess returns true when this is valid bad request response has a 2xx status code
func (o *IsValidBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this is valid bad request response has a 3xx status code
func (o *IsValidBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this is valid bad request response has a 4xx status code
func (o *IsValidBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this is valid bad request response has a 5xx status code
func (o *IsValidBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this is valid bad request response a status code equal to that given
func (o *IsValidBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the is valid bad request response
func (o *IsValidBadRequest) Code() int {
	return 400
}

func (o *IsValidBadRequest) Error() string {
	return fmt.Sprintf("[GET /card/validator/{id}][%d] isValidBadRequest", 400)
}

func (o *IsValidBadRequest) String() string {
	return fmt.Sprintf("[GET /card/validator/{id}][%d] isValidBadRequest", 400)
}

func (o *IsValidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
