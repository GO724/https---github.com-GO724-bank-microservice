// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCardsParams creates a new GetCardsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCardsParams() *GetCardsParams {
	return &GetCardsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCardsParamsWithTimeout creates a new GetCardsParams object
// with the ability to set a timeout on a request.
func NewGetCardsParamsWithTimeout(timeout time.Duration) *GetCardsParams {
	return &GetCardsParams{
		timeout: timeout,
	}
}

// NewGetCardsParamsWithContext creates a new GetCardsParams object
// with the ability to set a context for a request.
func NewGetCardsParamsWithContext(ctx context.Context) *GetCardsParams {
	return &GetCardsParams{
		Context: ctx,
	}
}

// NewGetCardsParamsWithHTTPClient creates a new GetCardsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCardsParamsWithHTTPClient(client *http.Client) *GetCardsParams {
	return &GetCardsParams{
		HTTPClient: client,
	}
}

/*
GetCardsParams contains all the parameters to send to the API endpoint

	for the get cards operation.

	Typically these are written to a http.Request.
*/
type GetCardsParams struct {

	/* Limit.

	   maximum number of records to return

	   Format: int32
	*/
	Limit *int32

	/* SearchString.

	   pass an optional search string for looking up card
	*/
	SearchString *string

	/* Skip.

	   number of records to skip for pagination

	   Format: int32
	*/
	Skip *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cards params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCardsParams) WithDefaults() *GetCardsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cards params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCardsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cards params
func (o *GetCardsParams) WithTimeout(timeout time.Duration) *GetCardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cards params
func (o *GetCardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cards params
func (o *GetCardsParams) WithContext(ctx context.Context) *GetCardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cards params
func (o *GetCardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cards params
func (o *GetCardsParams) WithHTTPClient(client *http.Client) *GetCardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cards params
func (o *GetCardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get cards params
func (o *GetCardsParams) WithLimit(limit *int32) *GetCardsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get cards params
func (o *GetCardsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithSearchString adds the searchString to the get cards params
func (o *GetCardsParams) WithSearchString(searchString *string) *GetCardsParams {
	o.SetSearchString(searchString)
	return o
}

// SetSearchString adds the searchString to the get cards params
func (o *GetCardsParams) SetSearchString(searchString *string) {
	o.SearchString = searchString
}

// WithSkip adds the skip to the get cards params
func (o *GetCardsParams) WithSkip(skip *int32) *GetCardsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get cards params
func (o *GetCardsParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WriteToRequest writes these params to a swagger request
func (o *GetCardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.SearchString != nil {

		// query param searchString
		var qrSearchString string

		if o.SearchString != nil {
			qrSearchString = *o.SearchString
		}
		qSearchString := qrSearchString
		if qSearchString != "" {

			if err := r.SetQueryParam("searchString", qSearchString); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
