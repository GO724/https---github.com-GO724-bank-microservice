// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DelPersonReader is a Reader for the DelPerson structure.
type DelPersonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DelPersonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDelPersonNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDelPersonBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDelPersonConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /persons/{inn}] delPerson", response, response.Code())
	}
}

// NewDelPersonNoContent creates a DelPersonNoContent with default headers values
func NewDelPersonNoContent() *DelPersonNoContent {
	return &DelPersonNoContent{}
}

/*
DelPersonNoContent describes a response with status code 204, with default header values.

person deleted
*/
type DelPersonNoContent struct {
}

// IsSuccess returns true when this del person no content response has a 2xx status code
func (o *DelPersonNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this del person no content response has a 3xx status code
func (o *DelPersonNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this del person no content response has a 4xx status code
func (o *DelPersonNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this del person no content response has a 5xx status code
func (o *DelPersonNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this del person no content response a status code equal to that given
func (o *DelPersonNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the del person no content response
func (o *DelPersonNoContent) Code() int {
	return 204
}

func (o *DelPersonNoContent) Error() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonNoContent", 204)
}

func (o *DelPersonNoContent) String() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonNoContent", 204)
}

func (o *DelPersonNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDelPersonBadRequest creates a DelPersonBadRequest with default headers values
func NewDelPersonBadRequest() *DelPersonBadRequest {
	return &DelPersonBadRequest{}
}

/*
DelPersonBadRequest describes a response with status code 400, with default header values.

invalid input, object invalid
*/
type DelPersonBadRequest struct {
}

// IsSuccess returns true when this del person bad request response has a 2xx status code
func (o *DelPersonBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this del person bad request response has a 3xx status code
func (o *DelPersonBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this del person bad request response has a 4xx status code
func (o *DelPersonBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this del person bad request response has a 5xx status code
func (o *DelPersonBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this del person bad request response a status code equal to that given
func (o *DelPersonBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the del person bad request response
func (o *DelPersonBadRequest) Code() int {
	return 400
}

func (o *DelPersonBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonBadRequest", 400)
}

func (o *DelPersonBadRequest) String() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonBadRequest", 400)
}

func (o *DelPersonBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDelPersonConflict creates a DelPersonConflict with default headers values
func NewDelPersonConflict() *DelPersonConflict {
	return &DelPersonConflict{}
}

/*
DelPersonConflict describes a response with status code 409, with default header values.

person not exists
*/
type DelPersonConflict struct {
}

// IsSuccess returns true when this del person conflict response has a 2xx status code
func (o *DelPersonConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this del person conflict response has a 3xx status code
func (o *DelPersonConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this del person conflict response has a 4xx status code
func (o *DelPersonConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this del person conflict response has a 5xx status code
func (o *DelPersonConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this del person conflict response a status code equal to that given
func (o *DelPersonConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the del person conflict response
func (o *DelPersonConflict) Code() int {
	return 409
}

func (o *DelPersonConflict) Error() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonConflict", 409)
}

func (o *DelPersonConflict) String() string {
	return fmt.Sprintf("[DELETE /persons/{inn}][%d] delPersonConflict", 409)
}

func (o *DelPersonConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
