// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new admins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new admins API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new admins API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for admins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBanks(params *GetBanksParams, opts ...ClientOption) (*GetBanksOK, error)

	GetCards(params *GetCardsParams, opts ...ClientOption) (*GetCardsOK, error)

	GetPersons(params *GetPersonsParams, opts ...ClientOption) (*GetPersonsOK, error)

	AddCard(params *AddCardParams, opts ...ClientOption) (*AddCardCreated, error)

	AddPerson(params *AddPersonParams, opts ...ClientOption) (*AddPersonCreated, error)

	Addbank(params *AddbankParams, opts ...ClientOption) (*AddbankCreated, error)

	DelBank(params *DelBankParams, opts ...ClientOption) (*DelBankNoContent, error)

	DelPerson(params *DelPersonParams, opts ...ClientOption) (*DelPersonNoContent, error)

	DelСard(params *DelСardParams, opts ...ClientOption) (*DelСardNoContent, error)

	GetBank(params *GetBankParams, opts ...ClientOption) (*GetBankCreated, error)

	GetCard(params *GetCardParams, opts ...ClientOption) (*GetCardCreated, error)

	GetPerson(params *GetPersonParams, opts ...ClientOption) (*GetPersonCreated, error)

	IsValid(params *IsValidParams, opts ...ClientOption) (*IsValidOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetBanks searches banks

	By passing in the appropriate options, you can search for

banks in the system
*/
func (a *Client) GetBanks(params *GetBanksParams, opts ...ClientOption) (*GetBanksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBanksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBanks",
		Method:             "GET",
		PathPattern:        "/banks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBanksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBanksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBanks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCards searches cards

	By passing in the appropriate options, you can search for

cards in the system
*/
func (a *Client) GetCards(params *GetCardsParams, opts ...ClientOption) (*GetCardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCards",
		Method:             "GET",
		PathPattern:        "/cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPersons searches persons

	By passing in the appropriate options, you can search for

persons in the system
*/
func (a *Client) GetPersons(params *GetPersonsParams, opts ...ClientOption) (*GetPersonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPersonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPersons",
		Method:             "GET",
		PathPattern:        "/persons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPersonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPersonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPersons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddCard adds an card item

Adds an card to the system
*/
func (a *Client) AddCard(params *AddCardParams, opts ...ClientOption) (*AddCardCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCard",
		Method:             "POST",
		PathPattern:        "/cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCardCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddPerson adds an person item

Adds an person to the system
*/
func (a *Client) AddPerson(params *AddPersonParams, opts ...ClientOption) (*AddPersonCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPerson",
		Method:             "POST",
		PathPattern:        "/persons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddPersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPersonCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addPerson: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Addbank adds an bank item

Adds an bank to the system
*/
func (a *Client) Addbank(params *AddbankParams, opts ...ClientOption) (*AddbankCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddbankParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addbank",
		Method:             "POST",
		PathPattern:        "/banks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddbankReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddbankCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addbank: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DelBank removes an bank item

Remove an bank from the system
*/
func (a *Client) DelBank(params *DelBankParams, opts ...ClientOption) (*DelBankNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelBankParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delBank",
		Method:             "DELETE",
		PathPattern:        "/banks/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelBankReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelBankNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delBank: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DelPerson removes an person item

Remove an person from the system
*/
func (a *Client) DelPerson(params *DelPersonParams, opts ...ClientOption) (*DelPersonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delPerson",
		Method:             "DELETE",
		PathPattern:        "/persons/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelPersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelPersonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delPerson: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DelСard removes an card item

Remove an card from the system
*/
func (a *Client) DelСard(params *DelСardParams, opts ...ClientOption) (*DelСardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelСardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delСard",
		Method:             "DELETE",
		PathPattern:        "/cards/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelСardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelСardNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delСard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBank gets an bank item

Gets an bank from the system
*/
func (a *Client) GetBank(params *GetBankParams, opts ...ClientOption) (*GetBankCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBank",
		Method:             "GET",
		PathPattern:        "/banks/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBankReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBank: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCard gets an card item

Gets an card from the system
*/
func (a *Client) GetCard(params *GetCardParams, opts ...ClientOption) (*GetCardCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCard",
		Method:             "GET",
		PathPattern:        "/cards/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCardCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPerson gets an person item

Gets an person from the system
*/
func (a *Client) GetPerson(params *GetPersonParams, opts ...ClientOption) (*GetPersonCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPerson",
		Method:             "GET",
		PathPattern:        "/persons/{inn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPersonCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPerson: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IsValid checks card

Check card status: if card.exists & card.valid>now() > valid = true
*/
func (a *Client) IsValid(params *IsValidParams, opts ...ClientOption) (*IsValidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsValidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isValid",
		Method:             "GET",
		PathPattern:        "/card/validator/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IsValidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsValidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isValid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
