// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bank-microservice/api/models"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// Schema cli for Card

// register flags to command
func registerModelCardFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCardPropBic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCardPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCardPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCardPropValid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCardPropBic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive bic uint32 is not supported by go-swagger cli yet

	return nil
}

func registerCardPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive id uint64 is not supported by go-swagger cli yet

	return nil
}

func registerCardPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Required. `

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerCardPropValid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagValidDescription := `Required. `

	var flagValidName string
	if cmdPrefix == "" {
		flagValidName = "valid"
	} else {
		flagValidName = fmt.Sprintf("%v.valid", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagValidName, "", flagValidDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCardFlags(depth int, m *models.Card, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BicAdded := retrieveCardPropBicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BicAdded

	err, IDAdded := retrieveCardPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, NameAdded := retrieveCardPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, ValidAdded := retrieveCardPropValidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValidAdded

	return nil, retAdded
}

func retrieveCardPropBicFlags(depth int, m *models.Card, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBicName := fmt.Sprintf("%v.bic", cmdPrefix)
	if cmd.Flags().Changed(flagBicName) {

		// warning: primitive bic uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCardPropIDFlags(depth int, m *models.Card, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		// warning: primitive id uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCardPropNameFlags(depth int, m *models.Card, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCardPropValidFlags(depth int, m *models.Card, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagValidName := fmt.Sprintf("%v.valid", cmdPrefix)
	if cmd.Flags().Changed(flagValidName) {

		var flagValidName string
		if cmdPrefix == "" {
			flagValidName = "valid"
		} else {
			flagValidName = fmt.Sprintf("%v.valid", cmdPrefix)
		}

		flagValidValueStr, err := cmd.Flags().GetString(flagValidName)
		if err != nil {
			return err, false
		}
		var flagValidValue strfmt.DateTime
		if err := flagValidValue.UnmarshalText([]byte(flagValidValueStr)); err != nil {
			return err, false
		}
		m.Valid = &flagValidValue

		retAdded = true
	}

	return nil, retAdded
}
