// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"bank-microservice/api/client/admins"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationAdminsGetPersonsCmd returns a command to handle operation getPersons
func makeOperationAdminsGetPersonsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "GetPersons",
		Short: `By passing in the appropriate options, you can search for
persons in the system
`,
		RunE: runOperationAdminsGetPersons,
	}

	if err := registerOperationAdminsGetPersonsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAdminsGetPersons uses cmd flags to call endpoint api
func runOperationAdminsGetPersons(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := admins.NewGetPersonsParams()
	if err, _ = retrieveOperationAdminsGetPersonsLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationAdminsGetPersonsSearchStringFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationAdminsGetPersonsSkipFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAdminsGetPersonsResult(appCli.Admins.GetPersons(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationAdminsGetPersonsParamFlags registers all flags needed to fill params
func registerOperationAdminsGetPersonsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAdminsGetPersonsLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAdminsGetPersonsSearchStringParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAdminsGetPersonsSkipParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAdminsGetPersonsLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagLimitDescription := `maximum number of records to return`

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int32

	_ = cmd.PersistentFlags().Int32(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerOperationAdminsGetPersonsSearchStringParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSearchStringDescription := `pass an optional search string for looking up person`

	var flagSearchStringName string
	if cmdPrefix == "" {
		flagSearchStringName = "searchString"
	} else {
		flagSearchStringName = fmt.Sprintf("%v.searchString", cmdPrefix)
	}

	var flagSearchStringDefault string

	_ = cmd.PersistentFlags().String(flagSearchStringName, flagSearchStringDefault, flagSearchStringDescription)

	return nil
}

func registerOperationAdminsGetPersonsSkipParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSkipDescription := `number of records to skip for pagination`

	var flagSkipName string
	if cmdPrefix == "" {
		flagSkipName = "skip"
	} else {
		flagSkipName = fmt.Sprintf("%v.skip", cmdPrefix)
	}

	var flagSkipDefault int32

	_ = cmd.PersistentFlags().Int32(flagSkipName, flagSkipDefault, flagSkipDescription)

	return nil
}

func retrieveOperationAdminsGetPersonsLimitFlag(m *admins.GetPersonsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt32(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = &flagLimitValue

	}

	return nil, retAdded
}

func retrieveOperationAdminsGetPersonsSearchStringFlag(m *admins.GetPersonsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("searchString") {

		var flagSearchStringName string
		if cmdPrefix == "" {
			flagSearchStringName = "searchString"
		} else {
			flagSearchStringName = fmt.Sprintf("%v.searchString", cmdPrefix)
		}

		flagSearchStringValue, err := cmd.Flags().GetString(flagSearchStringName)
		if err != nil {
			return err, false
		}
		m.SearchString = &flagSearchStringValue

	}

	return nil, retAdded
}

func retrieveOperationAdminsGetPersonsSkipFlag(m *admins.GetPersonsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("skip") {

		var flagSkipName string
		if cmdPrefix == "" {
			flagSkipName = "skip"
		} else {
			flagSkipName = fmt.Sprintf("%v.skip", cmdPrefix)
		}

		flagSkipValue, err := cmd.Flags().GetInt32(flagSkipName)
		if err != nil {
			return err, false
		}
		m.Skip = &flagSkipValue

	}

	return nil, retAdded
}

// parseOperationAdminsGetPersonsResult parses request result and return the string content
func parseOperationAdminsGetPersonsResult(resp0 *admins.GetPersonsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*admins.GetPersonsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getPersonsBadRequest is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
