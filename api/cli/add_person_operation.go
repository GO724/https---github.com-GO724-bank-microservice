// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"bank-microservice/api/client/admins"
	"bank-microservice/api/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationAdminsAddPersonCmd returns a command to handle operation addPerson
func makeOperationAdminsAddPersonCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "addPerson",
		Short: `Adds an person to the system`,
		RunE:  runOperationAdminsAddPerson,
	}

	if err := registerOperationAdminsAddPersonParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAdminsAddPerson uses cmd flags to call endpoint api
func runOperationAdminsAddPerson(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := admins.NewAddPersonParams()
	if err, _ = retrieveOperationAdminsAddPersonPersonFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAdminsAddPersonResult(appCli.Admins.AddPerson(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationAdminsAddPersonParamFlags registers all flags needed to fill params
func registerOperationAdminsAddPersonParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAdminsAddPersonPersonParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAdminsAddPersonPersonParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagPersonName string
	if cmdPrefix == "" {
		flagPersonName = "Person"
	} else {
		flagPersonName = fmt.Sprintf("%v.Person", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagPersonName, "", `Optional json string for [Person]. Person to add`)

	// add flags for body
	if err := registerModelPersonFlags(0, "person", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationAdminsAddPersonPersonFlag(m *admins.AddPersonParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Person") {
		// Read Person string from cmd and unmarshal
		flagPersonValueStr, err := cmd.Flags().GetString("Person")
		if err != nil {
			return err, false
		}

		flagPersonValue := models.Person{}
		if err := json.Unmarshal([]byte(flagPersonValueStr), &flagPersonValue); err != nil {
			return fmt.Errorf("cannot unmarshal Person string in models.Person: %v", err), false
		}
		m.Person = &flagPersonValue
	}
	flagPersonModel := m.Person
	if swag.IsZero(flagPersonModel) {
		flagPersonModel = &models.Person{}
	}
	err, added := retrieveModelPersonFlags(0, flagPersonModel, "person", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Person = flagPersonModel
	}

	if dryRun && debug {
		flagPersonValueDebugBytes, err := json.Marshal(m.Person)
		if err != nil {
			return err, false
		}
		logDebugf("Person dry-run payload: %v", string(flagPersonValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationAdminsAddPersonResult parses request result and return the string content
func parseOperationAdminsAddPersonResult(resp0 *admins.AddPersonCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning addPersonCreated is not supported

		// Non schema case: warning addPersonBadRequest is not supported

		// Non schema case: warning addPersonConflict is not supported

		return "", respErr
	}

	// warning: non schema response addPersonCreated is not supported by go-swagger cli yet.

	return "", nil
}
